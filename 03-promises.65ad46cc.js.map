{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAqBC,SAASC,cAAc,SAElDF,EAAmBG,iBAAiB,UAapC,SAAkBC,GAGhB,GAFAA,EAAMC,kBACNC,EAXF,WACE,IAAMC,EAAW,IAAIC,SAASR,GAC1BS,EAAa,GAIjB,OAHAF,EAASG,SAAQ,SAACC,EAAOC,GACvBH,EAAWG,GAAQD,KAEdF,EAKMI,IACEC,MAAQ,GAAKR,EAAWS,KAAO,GAAKT,EAAWU,OAAS,EACrEC,EAAAnB,GAASoB,OAAOC,QAAQ,qCACnB,CACL,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAWU,OAAQI,IACrCC,EAAcD,EAAI,EAAGE,OAAOhB,EAAWQ,OAASQ,OAAOhB,EAAWS,MAAQK,GAE5EhB,EAAMmB,cAAcC,YApBxB,IAAIlB,OAAamB,EAwBjB,SAASJ,EAAcK,EAAUZ,GAC/B,IAAIa,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUZ,UAEpBe,EAAO,CAAEH,WAAUZ,YAEpBA,MACFoB,MAAK,SAACC,G,OAAWlB,EAAAnB,GAASoB,OAAOkB,QAAQ,qBAA2CC,OAAtBF,EAAOT,SAAS,QAAmBW,OAAbF,EAAOrB,MAAM,UACjGwB,OAAM,SAACC,G,OAAUtB,EAAAnB,GAASoB,OAAOsB,QAAQ,oBAAyCH,OAArBE,EAAMb,SAAS,QAAkBW,OAAZE,EAAMzB,MAAM,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst createPromisesForm = document.querySelector(\".form\");\n\ncreatePromisesForm.addEventListener(\"submit\", onSubmit);\n\nlet formOutPut = undefined;\n\nfunction formDataReceipt() {\n  const formData = new FormData(createPromisesForm);\n  let formOutPut = {};\n  formData.forEach((value, name) => {\n    formOutPut[name] = value;\n  });\n  return formOutPut;\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  formOutPut = formDataReceipt(event);\n  if (formOutPut.delay < 0 || formOutPut.step < 0 || formOutPut.amount < 1) {\n    Notiflix.Notify.warning(\"Please, enter valid data only\")\n  } else {\n    for (let i = 0; i < formOutPut.amount; i++) {\n      createPromise(i + 1, Number(formOutPut.delay) + Number(formOutPut.step) * i);\n    }\n    event.currentTarget.reset();\n  }\n}\n\nfunction createPromise(position, delay) {\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  }).then((result) => Notiflix.Notify.success(`Fulfilled promise ${result.position} in ${result.delay}ms`))\n    .catch((error) => Notiflix.Notify.failure(`Rejected promise ${error.position} in ${error.delay}ms`));\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromisesForm","document","querySelector","addEventListener","event","preventDefault","$ce04d3a99e08e73b$var$formOutPut","formData","FormData","formOutPut1","forEach","value","name","$ce04d3a99e08e73b$var$formDataReceipt","delay","step","amount","$parcel$interopDefault","Notify","warning","i","$ce04d3a99e08e73b$var$createPromise","Number","currentTarget","reset","undefined","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","result","success","concat","catch","error","failure"],"version":3,"file":"03-promises.65ad46cc.js.map"}